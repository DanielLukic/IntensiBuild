Build system specialized for building IntensiGame-based applications.

h1. Description

IntensiBuild is a light weight build system for creating J2ME applications. It uses a small set of Ruby scripts with a generic Ant build file to create device-specific builds.

It is usually enough to have the IntensiBuild snapshot in your project under the relative path <code>modules/IntensiBuild</code> and create a small build.xml in you project root that imports the main build.xml from the IntensiBuild snapshot:
<code>
<project name="Example" default="build">
    <import file="modules/IntensiBuild/build.xml"/>
</project>
</code>

For creating IntensiBuild releases of your application, you have to create configuration files. At least one file should be present under for example <code>config/Example.rb</code>:
<code>
# Name of the resulting jar/jad bundle (no special chars).
@name = "Example"

# Possible targets are defined in file _targets.rb.
@targets = [ Generic_MIDP2, Nokia_MIDP2 ]

# Possible sizes correspond to the image folders in the res directory.
# You may use arbitrary folder names (no spaces or special chars) here -
# as long as they exist.
@sizes = [ "Default" ]

# Use this to activate global - not target-specific - settings. Used
# primarly for debug output and effects.
@symbols = []
</code>

The build system assumes there is a resource folder available with a structure matching the values given in the configuration file. If you name your project "Example" and build for a screen size "Default", the resource folder would need to look like:
<code>
res/Example/Default/
</code>

Finally you need to define some default build.properties:
<code>
# Project name for when building a default release.
project.name = Example

# Base name for the resulting .jar file.
output.name = Example

vendor.name = The.Berlin.Factor

screen.size = Default

# Symbols for the primary configuration.
defined_symbols = MIDP2,CLDC11,RUNME

# Main class - stays the same for all configurations.
midlet.class = net.intensicode.Main

# Primary configuration for normal Ant build.
release.configurations = Example

# Use this JAD file with - for example - a list of special MIDlet permissions.
jad.template = Example.jad
</code>

Override the WTK location in env.properties if necessary:
<code>
wtk.home = /usr/local/wtk
</code>

Create a release.sh script for convenience:
<code>
ruby -Imodules/IntensiBuild/scripts modules/IntensiBuild/scripts/release.rb $*
</code>

Create the JAD template:
<code>
MIDlet-Icon: /icon.png
MIDlet-Version: ${version}
MIDlet-Name: ${project.name}
MIDlet-Vendor: ${vendor.name}
MIDlet-Jar-URL: ${project.name}.jar
MIDlet-1: ${project.name}, /icon.png, ${midlet.class}
MIDlet-Permissions: javax.microedition.io.Connector.http,javax.microedition.io.Connector.https,javax.microedition.io.Connector.bluetooth.client,javax.microedition.io.Connector.comm,javax.microedition.io.Connector.socket,javax.microedition.io.Connector.datagram
</code>

If you want to create a signed WebStart version using RunMe, you need to create a proper signing.properties file:
<code>
signing.keytool = /usr/local/jdk/bin/keytool
signing.alias = intensicode
signing.keypass = password
signing.storepass = password
signing.keystore = ${dir.intensibuild}/keystore.bin
signing.dname = CN=intensicode, OU=it, O=intensicode, C=DE
</code>

Make sure you ran <code>ant update_certificate</code>.

h1. Using the build system

Creating a debug/development build: <code>ant build</code>

Creating a default configuration release build: <code>ant release</code>

Creating a specific release: <code>./release.sh config/Example.rb</code>

h1. License

This is open source software. See the gpl.txt file for more infomation.

Note that some files are included for which different licenses may apply.

Note that for all files that are probably 'mine', the GPL applies.

