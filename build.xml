<project name="IntensiBuild" default="build">

    <!-- Determine root of build system. -->
    <dirname property="dir.intensibuild" file="${ant.file.IntensiBuild}"/>

    <!-- Load values from the project root folder. -->
    <property file="release.properties"/>
    <property file="build.properties"/>
    <property file="env.properties"/>

    <!-- Set fallback defaults to make IntelliJ happy and have a proper configuration. -->
    <property name="screen.size" value="Default"/>
    <property name="project.name" value="${ant.project.name}"/>
    <property name="release.configurations" value=""/>

    <!-- Load the build defaults. -->
    <property file="${dir.intensibuild}/build_defaults.properties"/>

    <condition property="android" value="true">
        <equals arg1="${target.platform}" arg2="android"/>
    </condition>

    <condition property="j2me" value="true">
        <equals arg1="${target.platform}" arg2="j2me"/>
    </condition>

    <condition property="java" value="true">
        <equals arg1="${target.platform}" arg2="java"/>
    </condition>

    <!-- Show some debugging output. -->
    <echo message="PROJECT NAME: ${project.name}"/>
    <echo message="TARGET PLATFORM: ${target.platform}"/>


    <macrodef name="increment_version">
        <attribute name="file" default="version.properties"/>
        <attribute name="part" default="build"/>
        <sequential>
            <exec executable="ruby" failonerror="true" failifexecutionfails="true">
                <arg value="-I${dir.intensibuild}/scripts"/>
                <arg value="${dir.scripts}/increment_version.rb"/>
                <arg value="@{file}"/>
                <arg line="@{part}"/>
            </exec>
        </sequential>
    </macrodef>


    <path id="aspectj.antlibs">
        <pathelement path="${dir.environment}/aspectj/lib/aspectjtools.jar"/>
        <!--<pathelement path="${dir.environment}/aspectj/lib/aspectjrt.jar"/>-->
        <!--<pathelement path="${dir.environment}/aspectj/lib/aspectjweaver.jar"/>-->
        <!--<pathelement path="${dir.environment}/aspectj/lib/org.aspectj.matcher.jar"/>-->
    </path>

    <taskdef resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties" classpathref="aspectj.antlibs"/>

    <path id="android.antlibs">
        <pathelement path="${android.home}/tools/lib/anttasks.jar"/>
        <pathelement path="${android.home}/tools/lib/sdklib.jar"/>
        <pathelement path="${android.home}/tools/lib/androidprefs.jar"/>
        <pathelement path="${android.home}/tools/lib/apkbuilder.jar"/>
        <pathelement path="${android.home}/tools/lib/jarutils.jar"/>
    </path>

    <taskdef resource="net/sf/antcontrib/antcontrib.properties"
             classpath="${dir.env.libraries}/ant-contrib-1.0b2.jar;"/>

    <taskdef resource="antenna.properties" classpath="${dir.env.libraries}/antenna-bin-0.9.13-psychocell.jar;"/>
    <taskdef resource="proguard/ant/task.properties" classpath="${dir.env.libraries}/proguard-4.5.jar;"/>

    <taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask">
        <classpath>
            <pathelement location="${dir.env.test}/ant-junit.jar"/>
            <pathelement location="${dir.env.test}/junit-3.8.1.jar"/>
        </classpath>
    </taskdef>

    <taskdef name="aaptexec" classname="com.android.ant.AaptExecLoopTask" classpathref="android.antlibs"/>
    <taskdef name="apkbuilder" classname="com.android.ant.ApkBuilderTask" classpathref="android.antlibs"/>

    <taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy"
             classpath="${dir.env.groovy}/groovy-all-1.7.0.jar;"/>


    <path id="classpath.libraries.android">
        <fileset id="libraries.android" dir="${dir.libraries}/android" includes="*.jar"/>
    </path>

    <path id="classpath.libraries.j2me">
        <fileset id="libraries.j2me" dir="${dir.libraries}/j2me" includes="*.jar"/>
    </path>

    <path id="classpath.libraries.java">
        <fileset id="libraries.java" dir="${dir.libraries}/java" includes="*.jar"/>
    </path>

    <path id="classpath.build.android">
        <path refid="classpath.libraries.android"/>
        <pathelement location="${dir.build.classes}"/>
        <pathelement path="${build_libs}"/>
        <pathelement location="${android.jar}"/>
    </path>

    <path id="classpath.build.j2me">
        <path refid="classpath.libraries.j2me"/>
        <pathelement location="${dir.build.classes}"/>
        <!--<pathelement path="${build_libs}"/> is set by the wtkbuild task through wtk.midpapi -->
    </path>

    <path id="classpath.build.java">
        <path refid="classpath.libraries.java"/>
        <pathelement location="${dir.build.classes}"/>
        <pathelement path="${build_libs}"/>
    </path>

    <path id="classpath.build.runme">
        <fileset id="libraries.test" dir="${dir.runme.libs}" includes="*.jar"/>
    </path>

    <path id="classpath.test">
        <fileset id="libraries.test" dir="${dir.env.test}" includes="*.jar"/>
        <pathelement location="${dir.build.tests}"/>
        <pathelement location="${dir.tests}"/>
        <path refid="classpath.build.android"/>
        <path refid="classpath.build.j2me"/>
        <path refid="classpath.build.java"/>
    </path>


    <target name="_init">
        <mkdir dir="${dir.build}"/>
        <mkdir dir="${dir.build.assets}"/>
        <mkdir dir="${dir.build.dist}"/>
        <mkdir dir="${dir.build.tests}"/>
        <mkdir dir="${dir.build.runme}"/>
        <mkdir dir="${dir.build.classes}"/>
        <mkdir dir="${dir.build.obfuscated}"/>
        <mkdir dir="${dir.build.preverified}"/>
        <mkdir dir="${dir.release}"/>
        <antcall target="_update_font_sizes"/>
    </target>

    <target name="_update_font_sizes">
        <fileset id="res_font_images" dir="." includes="res/**/*font.png"/>
        <groovy src="${dir.intensibuild}/src/groovy/AntFontSizer.groovy"/>
    </target>

    <target name="_make_build_properties">
        <property file="version.properties"/>
        <echoproperties destfile="${jad.properties}" failonerror="true"/>
        <replaceregexp byline="true" file="${jad.properties}" match="(.*)=(.*)" replace="{\1}=\2"/>
        <replaceregexp byline="true" file="${jad.properties}" match="(.*)=(.*)" replace="$\1=\2"/>
    </target>

    <target name="_update_android_manifest" depends="_make_build_properties" if="android">
        <copy file="${android.manifest.template}" tofile="${android.manifest.file}" overwrite="true"/>
        <replace replacefilterfile="${jad.properties}" file="${android.manifest.file}"/>
    </target>

    <target name="_build_android_sources" depends="_init,_update_android_manifest" if="android">
        <increment_version part="KEEP THE SAME"/>

        <property file="version.properties"/>
        <property name="version" value="1.1.1"/>
        <property name="date" value="UNKNOWN"/>

        <echo message="Defined symbols: ${defined_symbols}"/>
        <wtkpreprocess srcdir="${dir.mod.intensigame}/${dir.sources}" symbols="${defined_symbols}"
                       destdir="${dir.build.sources}"/>
        <wtkpreprocess srcdir="${dir.mod.intensidroid}/${dir.sources}" symbols="${defined_symbols}"
                       destdir="${dir.build.sources}"/>
        <wtkpreprocess srcdir="${dir.sources}" symbols="${defined_symbols}" destdir="${dir.build.sources}"/>

        <copy file="${android.manifest.file}" tofile="${dir.build}/AndroidManifest.xml"/>

        <exec executable="${android.aapt}" failonerror="true">
            <arg value="package"/>
            <arg value="-v"/>
            <arg value="-m"/>
            <arg value="-J"/>
            <arg path="${dir.build.sources}"/>
            <arg value="-M"/>
            <arg path="${dir.build}/AndroidManifest.xml"/>
            <arg value="-S"/>
            <arg path="${dir.resources.android}"/>
            <arg value="-I"/>
            <arg path="${android.jar}"/>
        </exec>
    </target>

    <target name="_build_j2me_sources" depends="_init" if="j2me">
        <increment_version part="KEEP THE SAME"/>

        <property file="version.properties"/>
        <property name="version" value="1.1.1"/>
        <property name="date" value="UNKNOWN"/>

        <echo message="Defined symbols: ${defined_symbols}"/>
        <wtkpreprocess srcdir="${dir.mod.intensigame}/${dir.sources}" symbols="${defined_symbols}"
                       destdir="${dir.build.sources}"/>
        <wtkpreprocess srcdir="${dir.mod.intensime}/${dir.sources}" symbols="${defined_symbols}"
                       destdir="${dir.build.sources}"/>
        <wtkpreprocess srcdir="${dir.sources}" symbols="${defined_symbols}" destdir="${dir.build.sources}"/>
    </target>

    <target name="_build_sources" depends="_build_android_sources,_build_j2me_sources"/>

    <target name="_build_android_classes" depends="_build_sources" if="android">
        <property name="debug" value="false"/>
        <echo message="Debug? ${debug}"/>
        <javac target="1.5" debug="${debug}" encoding="ascii"
               srcdir="${dir.build.sources}" destdir="${dir.build.classes}"
               classpathref="classpath.build.android"/>
    </target>

    <target name="_build_j2me_classes" depends="_build_sources" if="j2me">
        <property name="debug" value="false"/>
        <wtkbuild source="1.3" target="1.3" srcdir="${dir.build.sources}"
                  destdir="${dir.build.classes}" preverify="false"
                  debug="${debug}" cldc="${wtk.cldc.version}"
                  classpathref="classpath.build.j2me"/>
    </target>

    <target name="_interweave_timing" if="interweave_timing">
        <iajc destdir="${dir.build}/aop" debug="true" source="1.3" target="1.3" showWeaveInfo="true">
            <inpath path="${dir.build.classes}"/>
            <sourceroots path="${dir.intensibuild}/src/aspectj"/>
            <classpath path="${dir.environment}/aspectj/lib/aspectjrt.jar"/>
        </iajc>
        <unzip src="${dir.environment}/aspectj/lib/aspectjrt.jar" dest="${dir.build}/aop"/>
        <move file="${dir.build.classes}" tofile="${dir.build.classes}.bak"/>
        <move file="${dir.build}/aop" tofile="${dir.build.classes}"/>
    </target>

    <target name="_build_classes" depends="_build_j2me_classes,_build_android_classes,_interweave_timing"/>

    <target name="_build_release" depends="_init">
        <echo message="Building releases: ${release.configurations}"/>
        <exec executable="ruby" failonerror="true" failifexecutionfails="true">
            <arg value="-I${dir.intensibuild}/scripts"/>
            <arg value="${dir.scripts}/release.rb"/>
            <arg line="${release.configurations}"/>
        </exec>
    </target>

    <target name="_enable_debug">
        <property name="debug" value="true"/>
    </target>

    <target name="_build_tests" depends="_enable_debug,_build_classes">
        <javac srcdir="${dir.tests}" destdir="${dir.build.tests}" debug="true" classpathref="classpath.test"
               target="1.5" source="1.5"/>
    </target>

    <target name="_build_runme" depends="_build_classes">
        <javac srcdir="${dir.runme.sources}" destdir="${dir.build.classes}" debug="true"
               classpathref="classpath.build.runme" target="1.5" source="1.5"/>
        <jar file="${dir.release}/RunME.jar">
            <fileset dir="${dir.build.classes}" includes="**/*"/>
        </jar>
    </target>

    <target name="_run_tests" depends="_build_tests">
        <dirname property="project.home" file="${ant.file}"/>
        <mkdir dir="${dir.release}/junit"/>
        <junit printsummary="yes" haltonfailure="yes" showoutput="true" dir="${project.home}">
            <classpath refid="classpath.test"/>
            <formatter type="brief" usefile="false"/>
            <formatter type="xml" usefile="true"/>
            <batchtest fork="yes" todir="${dir.release}/junit">
                <fileset dir="${dir.tests}">
                    <include name="**/Test*.java"/>
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="_run_specs"> <!-- depends="_enable_debug,_build_classes"> -->
        <!-- This obviously needs jruby and jruby -S gem install rspec to run. -->
        <exec executable="jruby" failonerror="true" failifexecutionfails="true">
            <arg line="-J-cp build/classes"/>
            <arg line="-J-cp ${android.jar}"/>
            <arg line="-S spec"/>
            <arg line="modules/Tests/spec"/>
            <arg line="-b -Lmtime -t1 -c -fo"/>
        </exec>
    </target>

    <target name="_obfuscate_j2me" if="j2me" unless="skip_proguard">
        <proguard optimize="true" shrink="true" defaultpackage=""
                  printmapping="false" verbose="false"
                  usemixedcaseclassnames="false" obfuscate="${obfuscate}"
                  overloadaggressively="true" printseeds="false"
                  allowaccessmodification="true" microedition="true">
            <injar dir="${dir.build.classes}"/>
            <outjar dir="${dir.build.obfuscated}"/>
            <libraryjar>
                <pathelement path="${wtk.midpapi}"/>
            </libraryjar>
            @keep_config.proguard
            -keep class * extends javax.microedition.midlet.MIDlet
            -optimizations !code/allocation/variable
        </proguard>
    </target>

    <target name="_obfuscate_android" if="android" unless="skip_proguard">
        <proguard optimize="${optimize}" shrink="${optimize}" defaultpackage=""
                  printmapping="false" verbose="false"
                  usemixedcaseclassnames="${optimize}" obfuscate="${obfuscate}"
                  overloadaggressively="false" printseeds="false"
                  allowaccessmodification="false" microedition="false">
            <injar dir="${dir.build.classes}"/>
            <outjar dir="${dir.build.obfuscated}"/>
            <libraryjar>
                <pathelement path="${build_libs}"/>
            </libraryjar>
            @keep_config.proguard
            -keep class * extends android.app.Activity
            -optimizations !code/allocation/variable
        </proguard>
    </target>

    <target name="_skip_proguard" if="skip_proguard">
        <copy todir="${dir.build.obfuscated}">
            <fileset dir="${dir.build.classes}" includes="**/*"/>
        </copy>
    </target>

    <target name="_obfuscate" depends="_obfuscate_j2me,_obfuscate_android,_skip_proguard"/>

    <target name="_preverify_android" if="android">
        <condition property="dex_debug" value="--debug" else="">
            <istrue value="${debug}"/>
        </condition>
        <exec executable="${android.dx}" failonerror="true">
            <arg line="--dex ${dex_debug} --output=${dex_target} ${dir.build.obfuscated}"/>
        </exec>
    </target>

    <target name="_preverify_j2me" if="j2me">
        <wtkpreverify cldc="${cldc_version}" srcdir="${dir.build.obfuscated}" destdir="${dir.build.preverified}"/>
    </target>

    <target name="_preverify" depends="_preverify_android,_preverify_j2me"/>

    <target name="_update_jad" if="j2me">
        <copy file="${jad.template}" tofile="${jad.file}" overwrite="true"/>
        <antcall target="_make_build_properties"/>
        <replace replacefilterfile="${jad.properties}" file="${jad.file}"/>
        <delete file="${jad.properties}"/>
        <wtkjad jadfile="${jad.file}" name="${project.name}" vendor="${vendor.name}" autoversion="false" update="true">
            <attribute name="MicroEdition-Configuration" value="CLDC-${cldc_version}"/>
            <attribute name="MicroEdition-Profile" value="MIDP-${midp_version}"/>
            <attribute name="MIDlet-Name" value="${project.name}"/>
        </wtkjad>
        <exec executable="ruby" failonerror="true" failifexecutionfails="true">
            <arg value="-I${dir.intensibuild}/scripts"/>
            <arg value="${dir.scripts}/merge_manifest.rb"/>
            <arg value="${jad.file}"/>
            <arg value="${manifest_additions}"/>
        </exec>
    </target>

    <target name="_update_jad_with_size" if="j2me">
        <copy file="${jad.template}" tofile="${jad.file}" overwrite="true"/>
        <antcall target="_make_build_properties"/>
        <replace replacefilterfile="${jad.properties}" file="${jad.file}"/>
        <delete file="${jad.properties}"/>
        <wtkjad jadfile="${jad.file}" jarfile="${jar.file}" name="${project.name}" vendor="${vendor.name}"
                autoversion="false" update="true">
            <attribute name="MicroEdition-Configuration" value="CLDC-${cldc_version}"/>
            <attribute name="MicroEdition-Profile" value="MIDP-${midp_version}"/>
            <attribute name="MIDlet-Name" value="${project.name}"/>
        </wtkjad>
        <exec executable="ruby" failonerror="true" failifexecutionfails="true">
            <arg value="-I${dir.intensibuild}/scripts"/>
            <arg value="${dir.scripts}/merge_manifest.rb"/>
            <arg value="${jad.file}"/>
            <arg value="${manifest_additions}"/>
        </exec>
    </target>

    <target name="_merge_libs_android" depends="_init" if="android">
        <unjar dest="${dir.build.classes}">
            <fileset refid="libraries.android"/>
        </unjar>
    </target>

    <target name="_merge_libs_j2me" depends="_init" if="j2me">
        <unjar dest="${dir.build.classes}">
            <fileset refid="libraries.j2me"/>
        </unjar>
    </target>

    <target name="_merge_libs_java" depends="_init" if="java">
        <unjar dest="${dir.build.classes}">
            <fileset refid="libraries.java"/>
        </unjar>
    </target>

    <target name="_merge_libs" depends="_merge_libs_android,_merge_libs_j2me,_merge_libs_java"/>

    <target name="_create_classes" depends="_build_sources,_build_classes,_merge_libs,_obfuscate,_preverify"/>

    <target name="_collect_assets" depends="_init">
        <echo message="Sound: ${target.sound_suffix} Music: ${target.music_suffix}"/>
        <echo message="Target resources: ${dir.resources.target}"/>
        <echo message="Platform resources: ${dir.resources.platform}"/>
        <echo message="Root resources: ${dir.resources.root}"/>
        <copy todir="${dir.build.assets}" overwrite="false" verbose="true">
            <fileset dir="${dir.resources.target}/${screen.size}">
                <include name="**/*"/>
            </fileset>
        </copy>
        <copy todir="${dir.build.assets}" overwrite="false" verbose="true">
            <fileset dir="${dir.resources.target}">
                <include name="*"/>
                <include name="${folder.sound}/*${target.sound_suffix}"/>
                <include name="${folder.music}/*${target.music_suffix}"/>
            </fileset>
        </copy>
        <copy todir="${dir.build.assets}" overwrite="false" verbose="true">
            <fileset dir="${dir.resources.platform}">
                <include name="*"/>
                <include name="${folder.sound}/*${target.sound_suffix}"/>
                <include name="${folder.music}/*${target.music_suffix}"/>
            </fileset>
        </copy>
        <copy todir="${dir.build.assets}" overwrite="false" verbose="true">
            <fileset dir="${dir.resources.root}">
                <include name="*"/>
                <include name="${folder.sound}/*${target.sound_suffix}"/>
                <include name="${folder.music}/*${target.music_suffix}"/>
            </fileset>
        </copy>
    </target>

    <target name="_sign_apk">
        <property file="${dir.intensibuild}/signing_defaults.properties"/>
        <signjar alias="${signing.alias}" storepass="${signing.storepass}"
                 keystore="${signing.keystore}" jar="${dir.build.dist}/${jar.basename}.apk"/>
    </target>

    <target name="_align_apk">
        <rename src="${dir.build.dist}/${jar.basename}.apk" dest="${dir.build.dist}/${jar.basename}.unaligned.apk"/>
        <exec executable="${android.zipalign}">
            <arg value="-f"/>
            <arg value="-v"/>
            <arg value="4"/>
            <arg value="${dir.build.dist}/${jar.basename}.unaligned.apk"/>
            <arg value="${dir.build.dist}/${jar.basename}.apk"/>
        </exec>
    </target>

    <target name="_package_android" depends="_collect_assets" if="android">
        <!-- This helped: http://asantoso.wordpress.com/2009/09/15/how-to-build-android-application-package-apk-from-the-command-line-using-the-sdk-tools-continuously-integrated-using-cruisecontrol/ -->
        <copy file="${android.manifest.file}" tofile="${dir.build}/AndroidManifest.xml"/>
        <property name="dir.build.res" value="${dir.build}/android_standard_resources"/>
        <copy todir="${dir.build.res}" verbose="true">
            <fileset dir="${dir.resources.android}" includes="**/*"/>
        </copy>
        <copy file="${dir.build.assets}/icon.png" todir="${dir.build.res}/drawable/" overwrite="true"/>
        <exec executable="${android.aapt}">
            <arg value="package"/>
            <arg value="-v"/>
            <arg value="-M"/>
            <arg value="${dir.build}/AndroidManifest.xml"/>
            <arg value="-F"/>
            <arg value="${dir.build}/AndroidResources.apk"/>
            <arg value="-I"/>
            <arg value="${android.jar}"/>
            <arg value="-S"/>
            <arg value="${dir.build.res}"/>
            <arg value="-A"/>
            <arg value="${dir.build.assets}"/>
        </exec>
        <exec executable="${android.apkbuilder}">
            <arg value="${dir.build.dist}/${jar.basename}.apk"/>
            <arg value="-u"/>
            <arg value="-z"/>
            <arg value="${dir.build}/AndroidResources.apk"/>
            <arg value="-f"/>
            <arg value="${dex_target}"/>
        </exec>
        <antcall target="_sign_apk"/>
        <antcall target="_align_apk"/>
    </target>

    <target name="_package_j2me" if="j2me">
        <antcall target="_update_jad"/>
        <jar jarfile="${jar.file}" manifest="${jad.file}" duplicate="preserve">
            <fileset dir="${dir.build.preverified}"/>
            <fileset dir="${dir.resources.target}/${screen.size}">
                <include name="*"/>
                <include name="${folder.sound}/*${target.sound_suffix}"/>
                <include name="${folder.music}/*${target.music_suffix}"/>
            </fileset>
            <fileset dir="${dir.resources.target}">
                <include name="*"/>
                <include name="${folder.sound}/*${target.sound_suffix}"/>
                <include name="${folder.music}/*${target.music_suffix}"/>
            </fileset>
            <fileset dir="${dir.resources.platform}">
                <include name="*"/>
                <include name="${folder.sound}/*${target.sound_suffix}"/>
                <include name="${folder.music}/*${target.music_suffix}"/>
            </fileset>
            <fileset dir="${dir.resources.root}">
                <include name="*"/>
                <include name="${folder.sound}/*${target.sound_suffix}"/>
                <include name="${folder.music}/*${target.music_suffix}"/>
            </fileset>
        </jar>
        <!-- Update again to set MIDlet-Jar-Size attribute. -->
        <antcall target="_update_jad_with_size"/>
    </target>

    <target name="_package_application" depends="_create_classes,_package_android,_package_j2me"/>

    <target name="_sign_jar">
        <property file="${dir.intensibuild}/signing_defaults.properties"/>
        <signjar alias="${signing.alias}" storepass="${signing.storepass}"
                 keystore="${signing.keystore}" jar="${jar.runme}"/>
    </target>

    <target name="_package_runme" depends="_build_runme,_merge_libs_j2me">
        <delete file="${jar.runme}" failonerror="false"/>
        <jar jarfile="${jar.runme}" duplicate="preserve">
            <fileset dir="${dir.build.classes}"/>
            <fileset dir="${dir.resources.target}/${screen.size}">
                <include name="*"/>
                <include name="${folder.sound}/*${target.sound_suffix}"/>
                <include name="${folder.music}/*${target.music_suffix}"/>
            </fileset>
            <fileset dir="${dir.resources.target}">
                <include name="*"/>
                <include name="${folder.sound}/*${target.sound_suffix}"/>
                <include name="${folder.music}/*${target.music_suffix}"/>
            </fileset>
            <fileset dir="${dir.resources.root}">
                <include name="*"/>
                <include name="${folder.sound}/*${target.sound_suffix}"/>
                <include name="${folder.music}/*${target.music_suffix}"/>
            </fileset>
            <manifest>
                <attribute name="Main-Class" value="${main.class}"/>
            </manifest>
        </jar>
        <antcall target="_sign_jar"/>
    </target>

    <target name="_package_distribution">
        <zip destfile="${zip.file.distribution}">
            <fileset dir=".">
                <include name="**/*"/>
                <exclude name="**/.*"/>
                <exclude name="${dir.build.dist}/**/*"/>
                <exclude name="${dir.build.dist}"/>
                <exclude name="${dir.build}/**/*"/>
                <exclude name="${dir.build}"/>
                <exclude name="${dir.release}/**/*"/>
                <exclude name="${dir.release}"/>
                <exclude name="${dir.modules}/*/${dir.build}/**/*"/>
                <exclude name="${dir.modules}/*/${dir.build}"/>
            </fileset>
        </zip>
    </target>


    <target name="clean" description="Cleans all generated files.">
        <delete dir="${dir.build}" failonerror="false"/>
    </target>

    <target name="build" depends="_init,_package_application" description="Continous build (without clean)."/>

    <target name="test" depends="_run_tests" description="Run all tests."/>

    <target name="spec" depends="_run_specs" description="Run all specs."/>

    <target name="rebuild" depends="clean,build" description="Rebuild the system in development mode."/>

    <target name="release" depends="version:bump:date,version:bump:build,rebuild"
            description="Build the system in release mode.">
        <copy todir="${dir.release}" verbose="false">
            <fileset dir="${dir.build.dist}"/>
        </copy>
    </target>

    <target name="dist" description="Rebuild the system in distribution mode.">
        <antcall target="rebuild"/>
        <antcall target="_package_distribution"/>
    </target>

    <target name="run" depends="clean,build" description="Build application and run result in the WTK emulator.">
        <antcall target="run_only"/>
    </target>

    <target name="run_only" description="Run application in the WTK emulator.">
        <wtkrun heapsize="32M" jadfile="${jad.file}" classpath="${jar.file}"/>
    </target>

    <target name="runme" depends="_build_runme,runme_only"
            description="Build and start RunME Chooser in release folder."/>

    <target name="runme_only" description="Start RunME Chooser in release folder.">
        <java classname="net.intensicode.runme.MIDletChooser" fork="true" failonerror="true">
            <classpath refid="classpath.build.runme"/>
            <classpath>
                <pathelement path="${dir.release}/RunME.jar"/>
            </classpath>
        </java>
    </target>

    <target name="package" depends="clean" description="Build full distribution after clean rebuild.">
        <increment_version part="build date"/>

        <delete failonerror="false" verbose="false" quiet="true">
            <fileset dir="${dir.release}" includes="**/*"/>
        </delete>

        <antcall target="test"/>
        <antcall target="_build_release"/>

        <!-- This has to be the last step. Because the previous step deletes the release folder! -->
        <antcall target="_package_runme"/>
    </target>

    <target name="mrproper" description="Cleans all generated files and the release folder.">
        <antcall target="clean"/>
        <delete dir="." includes="release.log" failonerror="false"/>
        <delete dir="." includes="release.properties" failonerror="false"/>
        <delete dir="${dir.release}" failonerror="false"/>
        <delete dir="${dir.submission}" failonerror="false"/>
    </target>

    <target name="update_certificate" description="Generates a new certifacte for the WebStart signing.">
        <property file="${dir.intensibuild}/signing_defaults.properties"/>

        <exec executable="keytool" failonerror="false" failifexecutionfails="true">
            <arg line="-delete -alias ${signing.alias} -keystore ${signing.keystore} -storepass ${signing.storepass}"/>
        </exec>

        <genkey alias="${signing.alias}" storepass="${signing.storepass}" keystore="${signing.keystore}"
                dname="CN=The.Berlin.Factor, OU=Intensicode, O=Psychocell, C=DE" validity="10000">
        </genkey>
    </target>

    <target name="version" description="Show current version.">
        <property file="version.properties"/>
        <property name="version" value="UNKNOWN"/>
        <property name="build" value="UNKNOWN"/>
        <property name="date" value="UNKNOWN"/>
        <echo message="version: ${version}"/>
        <echo message="build: ${build}"/>
        <echo message="date: ${date}"/>
    </target>
    <target name="version:bump:date" description="Update version date.">
        <increment_version part="date"/>
    </target>
    <target name="version:bump:build" description="Increase version build number.">
        <increment_version part="build"/>
    </target>
    <target name="version:bump:minor" description="Increase version minor number.">
        <increment_version part="minor"/>
    </target>
    <target name="version:bump:major" description="Increase version major number.">
        <increment_version part="major"/>
    </target>
    <target name="version:bump:version" description="Increase version version number.">
        <increment_version part="version"/>
    </target>

    <import file="build_android_utils.xml"/>

</project>
